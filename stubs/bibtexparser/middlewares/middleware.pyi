import abc
from collections.abc import Collection

from bibtexparser.library import Library as Library
from bibtexparser.model import Block as Block
from bibtexparser.model import Entry as Entry
from bibtexparser.model import ExplicitComment as ExplicitComment
from bibtexparser.model import ImplicitComment as ImplicitComment
from bibtexparser.model import Preamble as Preamble
from bibtexparser.model import String as String

class Middleware(abc.ABC, metaclass=abc.ABCMeta):
    def __init__(self, allow_parallel_execution: bool = True, allow_inplace_modification: bool = True) -> None: ...
    @property
    def allow_inplace_modification(self) -> bool: ...
    @property
    def allow_parallel_execution(self) -> bool: ...
    @abc.abstractmethod
    def transform(self, library: Library) -> Library: ...

class BlockMiddleware(Middleware, abc.ABC):
    @classmethod
    def metadata_key(cls) -> str: ...
    def transform(self, library: Library) -> Library: ...
    def transform_block(self, block: Block, library: Library) -> Block | Collection[Block] | None: ...
    def transform_entry(self, entry: Entry, library: Library) -> Block | Collection[Block] | None: ...
    def transform_string(self, string: String, library: Library) -> Block | Collection[Block] | None: ...
    def transform_preamble(self, preamble: Preamble, library: Library) -> Block | Collection[Block] | None: ...
    def transform_explicit_comment(
        self, explicit_comment: ExplicitComment, library: Library
    ) -> Block | Collection[Block] | None: ...
    def transform_implicit_comment(
        self, implicit_comment: ImplicitComment, library: Library
    ) -> Block | Collection[Block] | None: ...

class LibraryMiddleware(Middleware, abc.ABC):
    def __init__(self, allow_inplace_modification: bool = True) -> None: ...
    def transform(self, library: Library) -> Library: ...
